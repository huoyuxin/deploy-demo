#!groovy
    def NAMESPACE = "demo"
    def APP_NAME='deploy-demo'; // 必需跟项目打包后的目录一致，同时也是http访问目录
    def POD_PORT='31301'
    def APP_TYPE='h5'
    def GROUP='airpay'

properties([
    parameters([
        // 增加子项目名称，如 
        // choice(name: 'APP_NAME', choices: ['sub1', 'sub2'], description: '子项目'),
        // choice(name: 'APP_NAME', choices: [], description: '子项目'),
        // gitParameter(branch: '',
        //     branchFilter: 'origin/(release(.*)|dev|test|uat|master|hotfix(.*))',
        //     defaultValue: 'test',
        //     description: 'remote git branch and tag',
        //     name: 'REVISION',
        //     quickFilterEnabled: false,
        //     selectedValue: 'DEFAULT',
        //     sortMode: 'DESCENDING_SMART',
        //     tagFilter: '*',
        //     listSize: '20',
        //     type: 'PT_BRANCH_TAG'),
        // choice(choices: ['test', 'uat', 'live'], description: '部署环境', name: 'ENV'),
        string(defaultValue: '3', description: '副本数', name: 'REPLICAS'),
        // choice(choices: ['th', 'vn'], description: '国家', name: 'REGION')
    ])
])

node ('master') {
    def REPLICAS = params.REPLICAS;
    // def  CPU='2'
    // def  MEM='4'
    // if(ENVIRONMENT == 'dev' || ENVIRONMENT == 'test' || ENVIRONMENT == 'uat'){
    //     REPLICAS='1'
    //     CPU='0.2'
    //     MEM='0.5'
    // }else{
    //     CPU='2'
    //     MEM='4'
    // }

    if(Integer.valueOf(REPLICAS) > 20) {
        error "REPLICAS out of limit"
    }

    println scm.userRemoteConfigs

    def myRepo = checkout([$class                           : 'GitSCM',
                           doGenerateSubmoduleConfigurations: false,
                           extensions                       : [],
                           gitTool                          : 'Default',
                           submoduleCfg                     : [],
                           userRemoteConfigs                : scm.userRemoteConfigs
    ])
    def gitCommit = myRepo.GIT_COMMIT
    def gitBranch = myRepo.GIT_BRANCH
    def shortGitCommit = "${gitCommit[0..10]}"
    def previousGitCommit = sh(script: "git rev-parse ${gitCommit}~", returnStdout: true)
    // 根据环境设置域名
    def HOST = "demo.deploy"
    // if(REGION == "th") {
    //     HOST = "h5.airpay.in.th"
    //     if(ENVIRONMENT == 'test'){
    //        HOST = "h5.test.airpay.in.th"
    //     }else if(ENVIRONMENT == 'uat'){
    //        HOST = "h5.uat.airpay.in.th"
    //     }
    // } else if (REGION == "vn") {
    //     HOST = "h5.airpay.vn"
    //     if (ENVIRONMENT == 'test') {
    //        HOST = "h5.test.airpay.vn"
    //     } else if (ENVIRONMENT == 'uat') {
    //        HOST = "h5.uat.airpay.vn"
    //     }
    // }

    // ?????
    def REGISTRY_CRED='mingyuanxiaoshui'
    def BUILD_TAG = "git-${shortGitCommit}"
    def IMAGE_NAME = "https://hub.docker.com/repository/docker/mingyuanxiaoshui/${APP_NAME}:${BUILD_TAG}"

    stage('Build') {
        def customImage = docker.build("${IMAGE_NAME}", "--build-arg appname=${APP_NAME} -f deploy/Dockerfile .")
        docker.withRegistry('https://hub.docker.com', "${REGISTRY_CRED}") {
            customImage.push()
        }
    }

    stage('Config') {
        sh """
           sed -i 's#\$APP_NAME#$APP_NAME#g
                   s#\$POD_PORT#$POD_PORT#g
                   s#\$NAMESPACE#$NAMESPACE#g
                   s#\$REPLICAS#$REPLICAS#g
                   s#\$IMAGE_NAME#$IMAGE_NAME#g
                   s#\$HOST#${HOST}#g
                  '  deploy/deploy.yml
           """
    }

    stage('Deploy'){
        kubernetesDeploy(kubeconfigId: "kubeconfig",
                         configs: 'deploy/*.yml',
                         enableConfigSubstitution: true,
        )
    }

    stage('Poll Status') {
        withCredentials([kubeconfigContent(credentialsId: "kubeconfig",
                                           variable: 'kubeconfig')]) {
            sh """#!/bin/bash
               mkdir -p ~/.kube && echo "$kubeconfig" > ~/.kube/config
               set -x
               for i in \$(seq 1 5); do
                   sleep 10
                    kubectl -n $NAMESPACE get po -owide | grep ${APP_NAME}
               done
               """
        }
    }
}
